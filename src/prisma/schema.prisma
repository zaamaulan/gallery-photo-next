generator client {
  provider = "prisma-client-js"
  // output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL") // uses connection pooling
  // directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// model Post {
//   id        String     @default(cuid()) @id
//   title     String
//   content   String?
//   published Boolean @default(false)
//   author    User?   @relation(fields: [authorId], references: [id])
//   authorId  String?
// }

// model User {
//   id            String       @default(cuid()) @id
//   name          String?
//   email         String?   @unique
//   createdAt     DateTime  @default(now()) @map(name: "created_at")
//   updatedAt     DateTime  @updatedAt @map(name: "updated_at")
//   posts         Post[]
//   @@map(name: "users")
// }

model User {
  id        String   @id @default(uuid())
  username  String   @unique
  fullname  String?
  email     String   @unique
  password  String
  address   String?
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  photo   Photo[]
  comment Comment[]
  like    Like[]

  @@map(name: "users")
}

model Photo {
  id          String   @id @default(uuid())
  userId      String?
  title       String
  description String
  publishedAt DateTime
  path        String
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @updatedAt @map(name: "updated_at")

  user    User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment Comment[]
  like    Like[]

  @@map(name: "photos")
}

model Comment {
  id        String   @id @default(uuid())
  photoId   String?
  userId    String?
  comment   String
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  photo Photo? @relation(fields: [photoId], references: [id], onDelete: Cascade)
  user  User?  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "comments")
}

model Like {
  id        String   @id @default(uuid())
  photoId   String?
  userId    String?
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  photo Photo? @relation(fields: [photoId], references: [id], onDelete: Cascade)
  user  User?  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "likes")
}
